generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  passwordHash String
  firstName    String
  lastName     String
  createdAt    DateTime  @default(now())
  lastLogin    DateTime? 
  isActive     Boolean   @default(true)

  // Relations
  // portfolios      Portfolio[]
  // watchLists      WatchList[]
  // analysisReports AnalysisReport[]
  // alertSettings   AlertSetting[]
  // apiKeys         ApiKey[]
  // auditLogs       AuditLog[]
}

// model Portfolio {
//   id          String   @id @default(uuid()) @db.Uuid
//   userId      String   @db.Uuid
//   name        String
//   description String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   isPublic    Boolean  @default(false)
//   currency    String

//   // Relations
//   user   User             @relation(fields: [userId], references: [id])
//   assets PortfolioAsset[]
// }

// model PortfolioAsset {
//   id          String   @id @default(uuid()) @db.Uuid
//   portfolioId String   @db.Uuid
//   symbol      String
//   assetType   String
//   quantity    Decimal
//   entryPrice  Decimal
//   entryDate   DateTime
//   metadata    Json?

//   // Relations
//   portfolio Portfolio @relation(fields: [portfolioId], references: [id])
// }

// model WatchList {
//   id          String   @id @default(uuid()) @db.Uuid
//   userId      String   @db.Uuid
//   name        String
//   description String?
//   createdAt   DateTime @default(now())
//   isPublic    Boolean  @default(false)

//   // Relations
//   user  User            @relation(fields: [userId], references: [id])
//   items WatchListItem[]
// }

// model WatchListItem {
//   id            String   @id @default(uuid()) @db.Uuid
//   watchlistId   String   @db.Uuid
//   symbol        String
//   assetType     String
//   alertSettings Json?
//   addedAt       DateTime @default(now())

//   // Relations
//   watchlist WatchList @relation(fields: [watchlistId], references: [id])
// }

// model MarketData {
//   id                String   @id @default(uuid()) @db.Uuid
//   symbol            String
//   assetType         String
//   price             Decimal
//   volume            Decimal
//   high              Decimal
//   low               Decimal
//   open              Decimal
//   close             Decimal
//   timestamp         DateTime
//   dataSource        String
//   additionalMetrics Json?
// }

// model TechnicalIndicator {
//   id            String   @id @default(uuid()) @db.Uuid
//   symbol        String
//   indicatorType String
//   parameters    Json
//   values        Json
//   calculatedAt  DateTime
//   dataStart     DateTime
//   dataEnd       DateTime
// }

// model AnalysisReport {
//   id                String    @id @default(uuid()) @db.Uuid
//   userId            String    @db.Uuid
//   title             String
//   type              String
//   content           Json
//   createdAt         DateTime  @default(now())
//   isScheduled       Boolean   @default(false)
//   scheduleFrequency String?
//   lastGenerated     DateTime?
//   status            String

//   // Relations
//   user User @relation(fields: [userId], references: [id])
// }

// model AlertSetting {
//   id                 String    @id @default(uuid()) @db.Uuid
//   userId             String    @db.Uuid
//   symbol             String
//   conditionType      String
//   thresholdValue     Decimal
//   isActive           Boolean   @default(true)
//   createdAt          DateTime  @default(now())
//   lastTriggered      DateTime?
//   notificationMethod String

//   // Relations
//   user User @relation(fields: [userId], references: [id])
// }

// model ApiKey {
//   id              String    @id @default(uuid()) @db.Uuid
//   userId          String    @db.Uuid
//   provider        String
//   apiKeyEncrypted String
//   createdAt       DateTime  @default(now())
//   expiresAt       DateTime?
//   isActive        Boolean   @default(true)

//   // Relations
//   user User @relation(fields: [userId], references: [id])
// }

// model AuditLog {
//   id         String   @id @default(uuid()) @db.Uuid
//   userId     String   @db.Uuid
//   actionType String
//   details    Json
//   timestamp  DateTime @default(now())
//   ipAddress  String
//   userAgent  String

//   // Relations
//   user User @relation(fields: [userId], references: [id])
// }
